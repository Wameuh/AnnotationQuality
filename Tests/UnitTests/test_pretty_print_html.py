import pytest
import os
import tempfile
from Utils.pretty_print_html import (
    save_agreement_html, get_cell_html,
    get_agreement_class, get_confidence_interval_class
)


@pytest.fixture
def sample_agreements():
    """Fixture providing sample agreement data."""
    return {
        ('Annotator1', 'Annotator2'): 0.75,
        ('Annotator1', 'Annotator3'): 0.80,
        ('Annotator2', 'Annotator3'): 0.85,
    }


@pytest.fixture
def sample_confidence_intervals():
    """Fixture providing sample confidence interval data."""
    return {
        ('Annotator1', 'Annotator2'): {
            'ci_lower': 0.70,
            'ci_upper': 0.80,
            'confidence_level': 0.95,
            'method': 'wilson'
        },
        ('Annotator1', 'Annotator3'): {
            'ci_lower': 0.75,
            'ci_upper': 0.85,
            'confidence_level': 0.95,
            'method': 'wilson'
        },
        ('Annotator2', 'Annotator3'): {
            'ci_lower': 0.80,
            'ci_upper': 0.90,
            'confidence_level': 0.95,
            'method': 'wilson'
        },
    }


def test_save_agreement_html(sample_agreements, sample_confidence_intervals):
    """Test saving agreement results to HTML file."""
    # Create a temporary file
    with tempfile.NamedTemporaryFile(suffix='.html', delete=False) as tmp:
        tmp_path = tmp.name

    try:
        # Save HTML file
        save_agreement_html(
            tmp_path,
            sample_agreements,
            sample_confidence_intervals,
            title="Test Agreement Results"
        )

        # Check that file exists and has content
        assert os.path.exists(tmp_path)
        assert os.path.getsize(tmp_path) > 0

        # Read the file and check for expected content
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Check for basic HTML structure
        assert "<!DOCTYPE html>" in content
        assert "<html lang=\"en\">" in content
        assert "</html>" in content

        # Check for title
        assert "<title>Test Agreement Results</title>" in content
        assert "<h1>Test Agreement Results</h1>" in content

        # Check for annotator names
        for annotator in ["Annotator1", "Annotator2", "Annotator3"]:
            assert annotator in content

        # Check for agreement values in different possible formats
        for value in [0.75, 0.80, 0.85]:
            assert (str(value) in content or
                    f"{value:.1f}" in content or
                    f"{value:.2f}" in content)

        # Check for heatmap
        assert "Agreement Heatmap" in content
        assert "data:image/png;base64," in content

        # Check for CSS classes for color coding
        assert "high-agreement" in content
        assert "medium-agreement" in content

        # Check for footer
        assert "Generated by" in content and "IAA-Eval" in content

        # Check that confidence intervals are in the output
        assert '70.0%' in content or '0.70' in content
        assert '80.0%' in content or '0.80' in content
        assert '90.0%' in content or '0.90' in content

        # Check that the confidence method and p-value are mentioned
        assert 'wilson' in content.lower()
        assert 'p = 0.05' in content

    finally:
        # Clean up the temporary file
        if os.path.exists(tmp_path):
            os.unlink(tmp_path)


def test_save_agreement_html_no_heatmap(sample_agreements):
    """Test saving agreement results to HTML without heatmap."""
    # Create a temporary file
    with tempfile.NamedTemporaryFile(suffix='.html', delete=False) as tmp:
        tmp_path = tmp.name

    try:
        # Save HTML file without heatmap
        save_agreement_html(
            tmp_path,
            sample_agreements,
            title="Agreement Results without Heatmap",
            include_heatmap=False
        )

        # Check that file exists and has content
        assert os.path.exists(tmp_path)
        assert os.path.getsize(tmp_path) > 0

        # Read the file and check content
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Check that the heatmap is not included
        assert "Agreement Heatmap" not in content
        assert "data:image/png;base64," not in content

    finally:
        # Clean up the temporary file
        if os.path.exists(tmp_path):
            os.unlink(tmp_path)


def test_get_cell_html_with_different_values():
    """Test get_cell_html function with different values and classes."""
    # Test with a high agreement value
    high_cell = get_cell_html("95.0%", 0.95)
    assert 'high-agreement' in high_cell
    assert '95.0%' in high_cell

    # Test with a medium agreement value
    medium_cell = get_cell_html("65.0%", 0.65)
    assert 'medium-agreement' in medium_cell
    assert '65.0%' in medium_cell

    # Test with a low agreement value
    low_cell = get_cell_html("35.0%", 0.35)
    assert 'low-agreement' in low_cell
    assert '35.0%' in low_cell

    # Test with a cell that already contains confidence interval text
    cell_with_ci_text = get_cell_html("65.0% [60.0%-70.0%]", 0.65)
    assert 'medium-agreement' in cell_with_ci_text
    assert '65.0%' in cell_with_ci_text
    assert '60.0%' in cell_with_ci_text
    assert '70.0%' in cell_with_ci_text


def test_get_cell_html_with_special_values():
    """
    Test get_cell_html function with special values like N/A and diagonal.
    """
    # Test with diagonal marker
    diagonal_cell = get_cell_html("---", None)
    assert '<td>---</td>' == diagonal_cell

    # Test with N/A value
    na_cell = get_cell_html("N/A", None)
    assert '<td>N/A</td>' == na_cell

    # Test with a regular value
    regular_cell = get_cell_html("75.0%", 0.75)
    assert '<td' in regular_cell
    assert 'class=' in regular_cell
    assert '75.0%' in regular_cell
    assert '</td>' in regular_cell


def test_get_agreement_class():
    """Test get_agreement_class function with different agreement values."""
    # Test with a high agreement value (>= 0.8)
    assert get_agreement_class(0.95) == "high-agreement"
    assert get_agreement_class(0.8) == "high-agreement"

    # Test with a medium agreement value (>= 0.6 and < 0.8)
    assert get_agreement_class(0.75) == "medium-agreement"
    assert get_agreement_class(0.6) == "medium-agreement"

    # Test with a low agreement value (< 0.6)
    assert get_agreement_class(0.59) == "low-agreement"
    assert get_agreement_class(0.3) == "low-agreement"
    assert get_agreement_class(0.0) == "low-agreement"


def test_get_confidence_interval_class():
    """
    Test get_confidence_interval_class function with different interval widths.
    """
    # Test with a narrow interval (width <= 0.1)
    narrow_class = get_confidence_interval_class(0.75, 0.80)
    assert narrow_class == "narrow-interval"

    # Test with a medium interval (0.1 < width <= 0.2)
    medium_class = get_confidence_interval_class(0.70, 0.85)
    assert medium_class == "medium-interval"

    # Test with a wide interval (width > 0.2)
    wide_class = get_confidence_interval_class(0.60, 0.90)
    assert wide_class == "wide-interval"

    # Test with extreme values
    extreme_class = get_confidence_interval_class(0.0, 1.0)
    assert extreme_class == "wide-interval"


def test_save_agreement_html_with_partial_ci():
    """
    Test saving agreement results to HTML with partial confidence intervals.
    """
    # Create agreements for three pairs of annotators
    agreements = {
        ('Annotator1', 'Annotator2'): 0.75,
        ('Annotator1', 'Annotator3'): 0.80,
        ('Annotator2', 'Annotator3'): 0.85,
    }

    # Create confidence intervals for only one pair
    partial_confidence_intervals = {
        ('Annotator1', 'Annotator2'): {
            'ci_lower': 0.70,
            'ci_upper': 0.80,
            'confidence_level': 0.95,
            'method': 'wilson'
        }
        # No CI for other pairs
    }

    # Create a temporary file
    with tempfile.NamedTemporaryFile(suffix='.html', delete=False) as tmp:
        tmp_path = tmp.name

    try:
        # Save HTML file with partial confidence intervals
        save_agreement_html(
            tmp_path,
            agreements,
            partial_confidence_intervals,
            title="Test Agreement Results with Partial CI"
        )

        # Check that file exists and has content
        assert os.path.exists(tmp_path)
        assert os.path.getsize(tmp_path) > 0

        # Read the file and check for expected content
        with open(tmp_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Check for basic HTML structure
        assert "<!DOCTYPE html>" in content
        assert "<html lang=\"en\">" in content
        assert "</html>" in content

        # Check for title
        assert "Test Agreement Results with Partial CI" in content

        # Check for annotator names
        for annotator in ["Annotator1", "Annotator2", "Annotator3"]:
            assert annotator in content

        # Check that confidence intervals are shown for the pair that has them
        assert '70.0%' in content or '0.70' in content
        assert '80.0%' in content or '0.80' in content

    finally:
        # Clean up the temporary file
        if os.path.exists(tmp_path):
            os.unlink(tmp_path)
